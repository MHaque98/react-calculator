{"version":3,"sources":["Components/Calculator.js","Components/KeypadRow.js","Components/Button.js","Components/Keypad.js","Components/Screen/ResultScreen.js","Components/Screen/ComputationScreen.js","Components/Screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","equation","setEquation","result","setResult","onButtonPress","event","equationVal","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","error","alert","trim","substr","length","className","KeypadRow","props","console","log","children","Button","classes","type","push","join","onClick","Keypad","ResultScreen","ComputationScreen","Screen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wmBAIA,SAASA,aAAc,IAAD,UACYC,oDAAS,IADrB,+KACbC,SADa,cACHC,YADG,yBAEQF,oDAAS,GAFjB,gLAEbG,OAFa,cAELC,UAFK,cAIpB,SAASC,cAAcC,OACrB,IAAIC,YAAcN,SACZO,cAAgBF,MAAMG,OAAOC,UACnC,GAAsB,MAAlBF,cAAuB,OAAOG,QAC7B,GACFH,eAAiB,KAAOA,eAAiB,KACxB,MAAlBA,cAEAD,aAAeC,mBACZ,IAA0D,IAAtD,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKI,QAAQJ,eACzCD,aAAe,IAAMC,cAAgB,SAClC,GAAsB,MAAlBA,cACP,IAEE,IAAMK,WAAaC,KAAKP,aAClBJ,QAASY,OAAOC,UAAUH,YAC5BA,WACAA,WAAWI,QAAQ,GACvBb,UAAUD,SACV,MAAOe,OACPC,MAAM,sCAGRZ,YAAcN,SAASmB,OACvBb,YAAcN,SAASoB,OAAO,EAAGpB,SAASqB,OAAS,GAGrDpB,YAAYK,aAEd,SAASI,QACPT,YAAY,IACZE,UAAU,GAGZ,OACE,mEAAMmB,UAAU,cACd,2DAAC,8CAAD,CAAQtB,SAAUA,SAAUE,OAAQA,SACpC,2DAAC,uCAAD,CAAQE,cAAeA,iBAuDdN,kC,oDC7FAyB,MALf,SAAmBC,GAEjB,OADAC,QAAQC,IAAIF,GACL,yBAAKF,UAAU,cAAcE,EAAMG,WCU7BC,MAZf,SAAgBJ,GACd,IAAMK,EAAU,CAAC,OAIjB,MAHqB,qBAAVL,GAA+C,qBAAfA,EAAMM,MAC/CD,EAAQE,KAAK,QAAUP,EAAMM,MAG7B,4BAAQR,UAAWO,EAAQG,KAAK,KAAMC,QAAST,EAAMpB,eAClDoB,EAAMG,WCqCEO,IA1Cf,SAAgBV,GACd,OACE,yBAAKF,UAAU,UACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQlB,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,UACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,MAGF,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,MAGF,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,MAGF,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,MAGF,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,eAA7B,KACA,kBAAC,EAAD,CAAQA,cAAeoB,EAAMpB,cAAe0B,KAAK,SAAjD,S,iDChCOK,MAJf,SAAsBX,GACpB,OAAO,yBAAKF,UAAU,iBAAiBE,EAAMG,WCGhCS,MAJf,SAA2BZ,GACzB,OAAO,yBAAKF,UAAU,sBAAsBE,EAAMG,WCUrCU,IATf,SAAgBb,GACd,OACE,yBAAKF,UAAU,UACb,kBAAC,EAAD,KAAeE,EAAMtB,QACrB,kBAAC,EAAD,KAAoBsB,EAAMxB,a,8ICKjBsC,MARf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAACxB,EAAA,EAAD,QCIcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLQ,QAAQR,MAAMA,EAAMsC,c","file":"static/js/main.a686b162.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Screen from \"./Screen/Screen\";\r\nimport Keypad from \"./Keypad\";\r\n/*I have changed the class-based component to functional using HOOKS*/\r\nfunction Calculator() {\r\n  const [equation, setEquation] = useState(\"\");\r\n  const [result, setResult] = useState(0);\r\n\r\n  function onButtonPress(event) {\r\n    let equationVal = equation;\r\n    const pressedButton = event.target.innerHTML;\r\n    if (pressedButton === \"C\") return clear();\r\n    else if (\r\n      (pressedButton >= \"0\" && pressedButton <= \"9\") ||\r\n      pressedButton === \".\"\r\n    )\r\n      equationVal += pressedButton;\r\n    else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(pressedButton) !== -1)\r\n      equationVal += \" \" + pressedButton + \" \";\r\n    else if (pressedButton === \"=\") {\r\n      try {\r\n        // eslint-disable-next-line no-eval\r\n        const evalResult = eval(equationVal);\r\n        const result = Number.isInteger(evalResult)\r\n          ? evalResult\r\n          : evalResult.toFixed(2);\r\n        setResult(result);\r\n      } catch (error) {\r\n        alert(\"Invalid Mathematical Equation\");\r\n      }\r\n    } else {\r\n      equationVal = equation.trim();\r\n      equationVal = equation.substr(0, equation.length - 1);\r\n    }\r\n\r\n    setEquation(equationVal);\r\n  }\r\n  function clear() {\r\n    setEquation(\"\");\r\n    setResult(0);\r\n  }\r\n\r\n  return (\r\n    <main className=\"calculator\">\r\n      <Screen equation={equation} result={result} />\r\n      <Keypad onButtonPress={onButtonPress} />\r\n    </main>\r\n  );\r\n}\r\n\r\n// class Calculator extends React.Component {\r\n//   state = {\r\n//     equation: \"\",\r\n//     result: 0\r\n//   };\r\n\r\n//   onButtonPress = event => {\r\n//     let equation = this.state.equation;\r\n//     const pressedButton = event.target.innerHTML;\r\n//     if (pressedButton === \"C\") return this.clear();\r\n//     else if (\r\n//       (pressedButton >= \"0\" && pressedButton <= \"9\") ||\r\n//       pressedButton === \".\"\r\n//     )\r\n//       equation += pressedButton;\r\n//     else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(pressedButton) !== -1)\r\n//       equation += \" \" + pressedButton + \" \";\r\n//     else if (pressedButton === \"=\") {\r\n//       try {\r\n//         // eslint-disable-next-line no-eval\r\n//         const evalResult = eval(equation);\r\n//         const result = Number.isInteger(evalResult)\r\n//           ? evalResult\r\n//           : evalResult.toFixed(2);\r\n//         this.setState({ result });\r\n//       } catch (error) {\r\n//         alert(\"Invalid Mathematical Equation\");\r\n//       }\r\n//     } else {\r\n//       equation = equation.trim();\r\n//       equation = equation.substr(0, equation.length - 1);\r\n//     }\r\n\r\n//     this.setState({ equation: equation });\r\n//   };\r\n//   clear() {\r\n//     this.setState({ equation: \"\" });\r\n//     this.setState({ result: 0 });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <main className=\"calculator\">\r\n//         <Screen equation={this.state.equation} result={this.state.result} />\r\n//         <Keypad onButtonPress={this.onButtonPress} />\r\n//       </main>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\r\n\r\nfunction KeypadRow(props) {\r\n  console.log(props);\r\n  return <div className=\"keypad-row\">{props.children}</div>;\r\n}\r\n\r\nexport default KeypadRow;\r\n","import React from \"react\";\r\n\r\nfunction Button(props) {\r\n  const classes = [\"btn\"];\r\n  if (typeof props !== \"undefined\" && typeof props.type !== \"undefined\")\r\n    classes.push(\"btn--\" + props.type);\r\n\r\n  return (\r\n    <button className={classes.join(\" \")} onClick={props.onButtonPress}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport KeypadRow from \"./KeypadRow\";\r\nimport Button from \"./Button\";\r\n\r\nfunction Keypad(props) {\r\n  return (\r\n    <div className=\"keypad\">\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>C</Button>\r\n        <Button onButtonPress={props.onButtonPress}>&larr;</Button>\r\n        <Button onButtonPress={props.onButtonPress}>%</Button>\r\n        <Button onButtonPress={props.onButtonPress}>/</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>9</Button>\r\n        <Button onButtonPress={props.onButtonPress}>8</Button>\r\n        <Button onButtonPress={props.onButtonPress}>7</Button>\r\n        <Button onButtonPress={props.onButtonPress}>*</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>6</Button>\r\n        <Button onButtonPress={props.onButtonPress}>5</Button>\r\n        <Button onButtonPress={props.onButtonPress}>4</Button>\r\n        <Button onButtonPress={props.onButtonPress}>-</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>3</Button>\r\n        <Button onButtonPress={props.onButtonPress}>2</Button>\r\n        <Button onButtonPress={props.onButtonPress}>1</Button>\r\n        <Button onButtonPress={props.onButtonPress}>+</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>0</Button>\r\n        <Button onButtonPress={props.onButtonPress}>.</Button>\r\n        <Button onButtonPress={props.onButtonPress} type=\"large\">\r\n          =\r\n        </Button>\r\n      </KeypadRow>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Keypad;\r\n","import React from \"react\";\r\n\r\nfunction ResultScreen(props) {\r\n  return <div className=\"result-screen\">{props.children}</div>;\r\n}\r\n\r\nexport default ResultScreen;\r\n","import React from \"react\";\r\n\r\nfunction ComputationScreen(props) {\r\n  return <div className=\"computation-screen\">{props.children}</div>;\r\n}\r\n\r\nexport default ComputationScreen;\r\n","import React from \"react\";\r\nimport ResultScreen from \"./ResultScreen\";\r\nimport ComputationScreen from \"./ComputationScreen\";\r\n\r\nfunction Screen(props) {\r\n  return (\r\n    <div className=\"screen\">\r\n      <ResultScreen>{props.result}</ResultScreen>\r\n      <ComputationScreen>{props.equation}</ComputationScreen>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Screen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./Components/Calculator\";\nimport Calculator from \"./Components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}